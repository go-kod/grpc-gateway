syntax = "proto3";
package options;
option go_package = "github.com/sysulq/graphql-grpc-gateway/example;pb";

import "graphql/v1/extend.proto";

service Service {
    rpc Mutate1 (Data) returns (Data); // must be a mutation
    rpc Mutate2 (Data) returns (Data); // must be a mutation
    rpc Query1 (Data) returns (Data) {
        option (graphql.v1.rpc) = {query: ""};
    } // must be a query

    rpc Publish (stream Data) returns (Data); // must be a mutation
    rpc Subscribe (Data) returns (stream Data); // must be a subscription
    rpc PubSub1 (stream Data) returns (stream Data); // must be a mutation and a subscription

    rpc InvalidSubscribe1 (stream Data) returns (Data) {
        option (graphql.v1.rpc) = {query: ""};
    }; // must ignore
    rpc InvalidSubscribe2 (Data) returns (stream Data) {
        option (graphql.v1.rpc) = {mutation: ""};
    }; // must ignore
    rpc InvalidSubscribe3 (stream Data) returns (stream Data) {
        option (graphql.v1.rpc) = {query: ""};
    }; // must ignore
    rpc PubSub2 (stream Data) returns (stream Data) {
        option (graphql.v1.rpc) = {mutation: ""};
    }; // must ignore

    rpc Ignore (Data) returns (Data) {
        option (graphql.v1.rpc) = {ignore: true};
    }; // must ignore

    rpc Name (Data) returns (Data) {
        option (graphql.v1.rpc) = {mutation: "newName"};
    }; // method name should be "newName"
}

service Test {
    rpc Name (Data) returns (Data); // expect service name to be "name"
    rpc NewName (Data) returns (Data); // expect service name to be "newName1" since it collides with a name from a different service
}

service Query {
    rpc Query1 (Data) returns (Data) {
        option (graphql.v1.rpc) = {query: "queryQuery1"};
    }; // must be a query
    rpc Query2 (Data) returns (Data) {
        option (graphql.v1.rpc) = {query: "queryQuery2"};
    }; // must be a query
    rpc Mutate1 (Data) returns (Data) {
        option (graphql.v1.rpc) = {mutation: ""};
    } // must be a mutation
    rpc Subscribe (Data) returns (stream Data); // must be a subscription
}

message Data {
    string string_x = 1 [(graphql.v1.field) = {required: true}]; // must be required
    Foo2 foo = 2 [(graphql.v1.field) = {required: true}]; // must be required
    repeated double double = 3 [(graphql.v1.field) = {required: true}]; // must be required because its greater than 0
    string string2 = 4; // simple
    Foo2 foo2 = 5; // simple
    repeated double double2 = 6; // simple
    string bar = 7 [(graphql.v1.field) = {ignore: false}];
    string string = 8 [(graphql.v1.field) = {ignore: false}];
}

message Foo2 {
    string param1 = 1;
}
