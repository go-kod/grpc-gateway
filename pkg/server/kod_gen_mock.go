// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/server/kod_gen_interface.go
//
// Generated by this command:
//
//	mockgen -source pkg/server/kod_gen_interface.go -destination pkg/server/kod_gen_mock.go -package server
//

// Package server is a generated GoMock package.
package server

import (
	context "context"
	http "net/http"
	reflect "reflect"

	proto "github.com/golang/protobuf/proto"
	desc "github.com/jhump/protoreflect/desc"
	graphql "github.com/nautilus/graphql"
	generator "github.com/sysulq/graphql-gateway/pkg/generator"
	gomock "go.uber.org/mock/gomock"
)

// MockConfigComponent is a mock of ConfigComponent interface.
type MockConfigComponent struct {
	ctrl     *gomock.Controller
	recorder *MockConfigComponentMockRecorder
}

// MockConfigComponentMockRecorder is the mock recorder for MockConfigComponent.
type MockConfigComponentMockRecorder struct {
	mock *MockConfigComponent
}

// NewMockConfigComponent creates a new mock instance.
func NewMockConfigComponent(ctrl *gomock.Controller) *MockConfigComponent {
	mock := &MockConfigComponent{ctrl: ctrl}
	mock.recorder = &MockConfigComponentMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConfigComponent) EXPECT() *MockConfigComponentMockRecorder {
	return m.recorder
}

// Config mocks base method.
func (m *MockConfigComponent) Config() *Config {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Config")
	ret0, _ := ret[0].(*Config)
	return ret0
}

// Config indicates an expected call of Config.
func (mr *MockConfigComponentMockRecorder) Config() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Config", reflect.TypeOf((*MockConfigComponent)(nil).Config))
}

// MockServerComponent is a mock of ServerComponent interface.
type MockServerComponent struct {
	ctrl     *gomock.Controller
	recorder *MockServerComponentMockRecorder
}

// MockServerComponentMockRecorder is the mock recorder for MockServerComponent.
type MockServerComponentMockRecorder struct {
	mock *MockServerComponent
}

// NewMockServerComponent creates a new mock instance.
func NewMockServerComponent(ctrl *gomock.Controller) *MockServerComponent {
	mock := &MockServerComponent{ctrl: ctrl}
	mock.recorder = &MockServerComponentMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServerComponent) EXPECT() *MockServerComponentMockRecorder {
	return m.recorder
}

// BuildServer mocks base method.
func (m *MockServerComponent) BuildServer(ctx context.Context) (http.Handler, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BuildServer", ctx)
	ret0, _ := ret[0].(http.Handler)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BuildServer indicates an expected call of BuildServer.
func (mr *MockServerComponentMockRecorder) BuildServer(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BuildServer", reflect.TypeOf((*MockServerComponent)(nil).BuildServer), ctx)
}

// MockCaller is a mock of Caller interface.
type MockCaller struct {
	ctrl     *gomock.Controller
	recorder *MockCallerMockRecorder
}

// MockCallerMockRecorder is the mock recorder for MockCaller.
type MockCallerMockRecorder struct {
	mock *MockCaller
}

// NewMockCaller creates a new mock instance.
func NewMockCaller(ctrl *gomock.Controller) *MockCaller {
	mock := &MockCaller{ctrl: ctrl}
	mock.recorder = &MockCallerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCaller) EXPECT() *MockCallerMockRecorder {
	return m.recorder
}

// Call mocks base method.
func (m *MockCaller) Call(ctx context.Context, rpc *desc.MethodDescriptor, message proto.Message) (proto.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Call", ctx, rpc, message)
	ret0, _ := ret[0].(proto.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Call indicates an expected call of Call.
func (mr *MockCallerMockRecorder) Call(ctx, rpc, message any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Call", reflect.TypeOf((*MockCaller)(nil).Call), ctx, rpc, message)
}

// GetDescs mocks base method.
func (m *MockCaller) GetDescs() []*desc.FileDescriptor {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDescs")
	ret0, _ := ret[0].([]*desc.FileDescriptor)
	return ret0
}

// GetDescs indicates an expected call of GetDescs.
func (mr *MockCallerMockRecorder) GetDescs() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDescs", reflect.TypeOf((*MockCaller)(nil).GetDescs))
}

// MockQueryer is a mock of Queryer interface.
type MockQueryer struct {
	ctrl     *gomock.Controller
	recorder *MockQueryerMockRecorder
}

// MockQueryerMockRecorder is the mock recorder for MockQueryer.
type MockQueryerMockRecorder struct {
	mock *MockQueryer
}

// NewMockQueryer creates a new mock instance.
func NewMockQueryer(ctrl *gomock.Controller) *MockQueryer {
	mock := &MockQueryer{ctrl: ctrl}
	mock.recorder = &MockQueryerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockQueryer) EXPECT() *MockQueryerMockRecorder {
	return m.recorder
}

// Query mocks base method.
func (m *MockQueryer) Query(ctx context.Context, input *graphql.QueryInput, result any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Query", ctx, input, result)
	ret0, _ := ret[0].(error)
	return ret0
}

// Query indicates an expected call of Query.
func (mr *MockQueryerMockRecorder) Query(ctx, input, result any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Query", reflect.TypeOf((*MockQueryer)(nil).Query), ctx, input, result)
}

// SetPM mocks base method.
func (m *MockQueryer) SetPM(pm generator.Registry) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetPM", pm)
}

// SetPM indicates an expected call of SetPM.
func (mr *MockQueryerMockRecorder) SetPM(pm any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetPM", reflect.TypeOf((*MockQueryer)(nil).SetPM), pm)
}
