// Code generated by "kod generate". DO NOT EDIT.
//go:build !ignoreKodGen

package server

import (
	"context"
	"github.com/go-kod/kod"
	"github.com/go-kod/kod/interceptor"
	"github.com/jhump/protoreflect/desc"
	"github.com/nautilus/graphql"
	"github.com/sysulq/graphql-gateway/pkg/generator"
	"google.golang.org/protobuf/runtime/protoiface"
	"net/http"
	"reflect"
)

func init() {
	kod.Register(&kod.Registration{
		Name:      "github.com/sysulq/graphql-gateway/pkg/server/Caller",
		Interface: reflect.TypeOf((*Caller)(nil)).Elem(),
		Impl:      reflect.TypeOf(caller{}),
		Refs:      `⟦5f5ebf18:KoDeDgE:github.com/sysulq/graphql-gateway/pkg/server/Caller→github.com/sysulq/graphql-gateway/pkg/server/ConfigComponent⟧`,
		LocalStubFn: func(ctx context.Context, info *kod.LocalStubFnInfo) any {
			interceptors := info.Interceptors
			if h, ok := info.Impl.(interface {
				Interceptors() []interceptor.Interceptor
			}); ok {
				interceptors = append(interceptors, h.Interceptors()...)
			}

			return caller_local_stub{
				impl:        info.Impl.(Caller),
				interceptor: interceptor.Chain(interceptors),
				name:        info.Name,
			}
		},
	})
	kod.Register(&kod.Registration{
		Name:      "github.com/sysulq/graphql-gateway/pkg/server/ConfigComponent",
		Interface: reflect.TypeOf((*ConfigComponent)(nil)).Elem(),
		Impl:      reflect.TypeOf(Config{}),
		Refs:      ``,
		LocalStubFn: func(ctx context.Context, info *kod.LocalStubFnInfo) any {
			interceptors := info.Interceptors
			if h, ok := info.Impl.(interface {
				Interceptors() []interceptor.Interceptor
			}); ok {
				interceptors = append(interceptors, h.Interceptors()...)
			}

			return configComponent_local_stub{
				impl:        info.Impl.(ConfigComponent),
				interceptor: interceptor.Chain(interceptors),
				name:        info.Name,
			}
		},
	})
	kod.Register(&kod.Registration{
		Name:      "github.com/sysulq/graphql-gateway/pkg/server/Queryer",
		Interface: reflect.TypeOf((*Queryer)(nil)).Elem(),
		Impl:      reflect.TypeOf(queryer{}),
		Refs:      `⟦a8d89257:KoDeDgE:github.com/sysulq/graphql-gateway/pkg/server/Queryer→github.com/sysulq/graphql-gateway/pkg/server/Caller⟧`,
		LocalStubFn: func(ctx context.Context, info *kod.LocalStubFnInfo) any {
			interceptors := info.Interceptors
			if h, ok := info.Impl.(interface {
				Interceptors() []interceptor.Interceptor
			}); ok {
				interceptors = append(interceptors, h.Interceptors()...)
			}

			return queryer_local_stub{
				impl:        info.Impl.(Queryer),
				interceptor: interceptor.Chain(interceptors),
				name:        info.Name,
			}
		},
	})
	kod.Register(&kod.Registration{
		Name:      "github.com/sysulq/graphql-gateway/pkg/server/ServerComponent",
		Interface: reflect.TypeOf((*ServerComponent)(nil)).Elem(),
		Impl:      reflect.TypeOf(server{}),
		Refs: `⟦fa17661a:KoDeDgE:github.com/sysulq/graphql-gateway/pkg/server/ServerComponent→github.com/sysulq/graphql-gateway/pkg/server/ConfigComponent⟧,
⟦9bbf643d:KoDeDgE:github.com/sysulq/graphql-gateway/pkg/server/ServerComponent→github.com/sysulq/graphql-gateway/pkg/server/Caller⟧,
⟦f1ffc65c:KoDeDgE:github.com/sysulq/graphql-gateway/pkg/server/ServerComponent→github.com/sysulq/graphql-gateway/pkg/server/Queryer⟧`,
		LocalStubFn: func(ctx context.Context, info *kod.LocalStubFnInfo) any {
			interceptors := info.Interceptors
			if h, ok := info.Impl.(interface {
				Interceptors() []interceptor.Interceptor
			}); ok {
				interceptors = append(interceptors, h.Interceptors()...)
			}

			return serverComponent_local_stub{
				impl:        info.Impl.(ServerComponent),
				interceptor: interceptor.Chain(interceptors),
				name:        info.Name,
			}
		},
	})
}

// kod.InstanceOf checks.
var _ kod.InstanceOf[Caller] = (*caller)(nil)
var _ kod.InstanceOf[ConfigComponent] = (*Config)(nil)
var _ kod.InstanceOf[Queryer] = (*queryer)(nil)
var _ kod.InstanceOf[ServerComponent] = (*server)(nil)

// Local stub implementations.

type caller_local_stub struct {
	impl        Caller
	name        string
	interceptor interceptor.Interceptor
}

// Check that caller_local_stub implements the Caller interface.
var _ Caller = (*caller_local_stub)(nil)

func (s caller_local_stub) Call(ctx context.Context, a1 *desc.MethodDescriptor, a2 protoiface.MessageV1) (r0 protoiface.MessageV1, err error) {

	if s.interceptor == nil {
		r0, err = s.impl.Call(ctx, a1, a2)
		return
	}

	call := func(ctx context.Context, info interceptor.CallInfo, req, res []any) (err error) {
		r0, err = s.impl.Call(ctx, a1, a2)
		res[0] = r0
		return
	}

	info := interceptor.CallInfo{
		Impl:       s.impl,
		Component:  s.name,
		FullMethod: "github.com/sysulq/graphql-gateway/pkg/server/Caller.Call",
		Method:     "Call",
	}

	err = s.interceptor(ctx, info, []any{a1, a2}, []any{r0}, call)
	return
}

func (s caller_local_stub) GetDescs() (r0 []*desc.FileDescriptor) {
	// Because the first argument is not context.Context, so interceptors are not supported.
	r0 = s.impl.GetDescs()
	return
}

type configComponent_local_stub struct {
	impl        ConfigComponent
	name        string
	interceptor interceptor.Interceptor
}

// Check that configComponent_local_stub implements the ConfigComponent interface.
var _ ConfigComponent = (*configComponent_local_stub)(nil)

func (s configComponent_local_stub) Config() (r0 *Config) {
	// Because the first argument is not context.Context, so interceptors are not supported.
	r0 = s.impl.Config()
	return
}

type queryer_local_stub struct {
	impl        Queryer
	name        string
	interceptor interceptor.Interceptor
}

// Check that queryer_local_stub implements the Queryer interface.
var _ Queryer = (*queryer_local_stub)(nil)

func (s queryer_local_stub) Query(ctx context.Context, a1 *graphql.QueryInput, a2 interface{}) (err error) {

	if s.interceptor == nil {
		err = s.impl.Query(ctx, a1, a2)
		return
	}

	call := func(ctx context.Context, info interceptor.CallInfo, req, res []any) (err error) {
		err = s.impl.Query(ctx, a1, a2)
		return
	}

	info := interceptor.CallInfo{
		Impl:       s.impl,
		Component:  s.name,
		FullMethod: "github.com/sysulq/graphql-gateway/pkg/server/Queryer.Query",
		Method:     "Query",
	}

	err = s.interceptor(ctx, info, []any{a1, a2}, []any{}, call)
	return
}

func (s queryer_local_stub) SetPM(a0 generator.Registry) {
	// Because the first argument is not context.Context, so interceptors are not supported.
	s.impl.SetPM(a0)
	return
}

type serverComponent_local_stub struct {
	impl        ServerComponent
	name        string
	interceptor interceptor.Interceptor
}

// Check that serverComponent_local_stub implements the ServerComponent interface.
var _ ServerComponent = (*serverComponent_local_stub)(nil)

func (s serverComponent_local_stub) BuildServer(ctx context.Context) (r0 http.Handler, err error) {

	if s.interceptor == nil {
		r0, err = s.impl.BuildServer(ctx)
		return
	}

	call := func(ctx context.Context, info interceptor.CallInfo, req, res []any) (err error) {
		r0, err = s.impl.BuildServer(ctx)
		res[0] = r0
		return
	}

	info := interceptor.CallInfo{
		Impl:       s.impl,
		Component:  s.name,
		FullMethod: "github.com/sysulq/graphql-gateway/pkg/server/ServerComponent.BuildServer",
		Method:     "BuildServer",
	}

	err = s.interceptor(ctx, info, []any{}, []any{r0}, call)
	return
}
