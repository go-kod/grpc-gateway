// Code generated by "kod generate". DO NOT EDIT.
//go:build !ignoreKodGen

package server

import (
	"context"
	"github.com/go-kod/kod"
	"github.com/go-kod/kod/interceptor"
	"github.com/jhump/protoreflect/desc"
	"github.com/nautilus/graphql"
	"github.com/sysulq/graphql-grpc-gateway/pkg/generator"
	"github.com/vektah/gqlparser/v2/ast"
	"google.golang.org/grpc"
	"google.golang.org/protobuf/runtime/protoiface"
	"net/http"
	"reflect"
)

func init() {
	kod.Register(&kod.Registration{
		Name:      "github.com/sysulq/graphql-grpc-gateway/pkg/server/Caller",
		Interface: reflect.TypeOf((*Caller)(nil)).Elem(),
		Impl:      reflect.TypeOf(caller{}),
		Refs: `⟦c1b8ae7c:KoDeDgE:github.com/sysulq/graphql-grpc-gateway/pkg/server/Caller→github.com/sysulq/graphql-grpc-gateway/pkg/server/Reflection⟧,
⟦4ba3c4e5:KoDeDgE:github.com/sysulq/graphql-grpc-gateway/pkg/server/Caller→github.com/sysulq/graphql-grpc-gateway/pkg/server/Config⟧`,
		LocalStubFn: func(ctx context.Context, info *kod.LocalStubFnInfo) any {
			interceptors := info.Interceptors
			if h, ok := info.Impl.(interface {
				Interceptors() []interceptor.Interceptor
			}); ok {
				interceptors = append(interceptors, h.Interceptors()...)
			}

			return caller_local_stub{
				impl:        info.Impl.(Caller),
				interceptor: interceptor.Chain(interceptors),
				name:        info.Name,
			}
		},
	})
	kod.Register(&kod.Registration{
		Name:      "github.com/sysulq/graphql-grpc-gateway/pkg/server/Config",
		Interface: reflect.TypeOf((*Config)(nil)).Elem(),
		Impl:      reflect.TypeOf(config{}),
		Refs:      ``,
		LocalStubFn: func(ctx context.Context, info *kod.LocalStubFnInfo) any {
			interceptors := info.Interceptors
			if h, ok := info.Impl.(interface {
				Interceptors() []interceptor.Interceptor
			}); ok {
				interceptors = append(interceptors, h.Interceptors()...)
			}

			return config_local_stub{
				impl:        info.Impl.(Config),
				interceptor: interceptor.Chain(interceptors),
				name:        info.Name,
			}
		},
	})
	kod.Register(&kod.Registration{
		Name:      "github.com/sysulq/graphql-grpc-gateway/pkg/server/Gateway",
		Interface: reflect.TypeOf((*Gateway)(nil)).Elem(),
		Impl:      reflect.TypeOf(server{}),
		Refs: `⟦6d641151:KoDeDgE:github.com/sysulq/graphql-grpc-gateway/pkg/server/Gateway→github.com/sysulq/graphql-grpc-gateway/pkg/server/Config⟧,
⟦40f6878e:KoDeDgE:github.com/sysulq/graphql-grpc-gateway/pkg/server/Gateway→github.com/sysulq/graphql-grpc-gateway/pkg/server/Queryer⟧,
⟦dc558453:KoDeDgE:github.com/sysulq/graphql-grpc-gateway/pkg/server/Gateway→github.com/sysulq/graphql-grpc-gateway/pkg/server/Registry⟧`,
		LocalStubFn: func(ctx context.Context, info *kod.LocalStubFnInfo) any {
			interceptors := info.Interceptors
			if h, ok := info.Impl.(interface {
				Interceptors() []interceptor.Interceptor
			}); ok {
				interceptors = append(interceptors, h.Interceptors()...)
			}

			return gateway_local_stub{
				impl:        info.Impl.(Gateway),
				interceptor: interceptor.Chain(interceptors),
				name:        info.Name,
			}
		},
	})
	kod.Register(&kod.Registration{
		Name:      "github.com/sysulq/graphql-grpc-gateway/pkg/server/Queryer",
		Interface: reflect.TypeOf((*Queryer)(nil)).Elem(),
		Impl:      reflect.TypeOf(queryer{}),
		Refs: `⟦83d7056d:KoDeDgE:github.com/sysulq/graphql-grpc-gateway/pkg/server/Queryer→github.com/sysulq/graphql-grpc-gateway/pkg/server/Registry⟧,
⟦79dd1377:KoDeDgE:github.com/sysulq/graphql-grpc-gateway/pkg/server/Queryer→github.com/sysulq/graphql-grpc-gateway/pkg/server/Caller⟧`,
		LocalStubFn: func(ctx context.Context, info *kod.LocalStubFnInfo) any {
			interceptors := info.Interceptors
			if h, ok := info.Impl.(interface {
				Interceptors() []interceptor.Interceptor
			}); ok {
				interceptors = append(interceptors, h.Interceptors()...)
			}

			return queryer_local_stub{
				impl:        info.Impl.(Queryer),
				interceptor: interceptor.Chain(interceptors),
				name:        info.Name,
			}
		},
	})
	kod.Register(&kod.Registration{
		Name:      "github.com/sysulq/graphql-grpc-gateway/pkg/server/Reflection",
		Interface: reflect.TypeOf((*Reflection)(nil)).Elem(),
		Impl:      reflect.TypeOf(reflection{}),
		Refs:      ``,
		LocalStubFn: func(ctx context.Context, info *kod.LocalStubFnInfo) any {
			interceptors := info.Interceptors
			if h, ok := info.Impl.(interface {
				Interceptors() []interceptor.Interceptor
			}); ok {
				interceptors = append(interceptors, h.Interceptors()...)
			}

			return reflection_local_stub{
				impl:        info.Impl.(Reflection),
				interceptor: interceptor.Chain(interceptors),
				name:        info.Name,
			}
		},
	})
	kod.Register(&kod.Registration{
		Name:      "github.com/sysulq/graphql-grpc-gateway/pkg/server/Registry",
		Interface: reflect.TypeOf((*Registry)(nil)).Elem(),
		Impl:      reflect.TypeOf(repository{}),
		Refs:      `⟦fc583f38:KoDeDgE:github.com/sysulq/graphql-grpc-gateway/pkg/server/Registry→github.com/sysulq/graphql-grpc-gateway/pkg/server/Caller⟧`,
		LocalStubFn: func(ctx context.Context, info *kod.LocalStubFnInfo) any {
			interceptors := info.Interceptors
			if h, ok := info.Impl.(interface {
				Interceptors() []interceptor.Interceptor
			}); ok {
				interceptors = append(interceptors, h.Interceptors()...)
			}

			return registry_local_stub{
				impl:        info.Impl.(Registry),
				interceptor: interceptor.Chain(interceptors),
				name:        info.Name,
			}
		},
	})
}

// kod.InstanceOf checks.
var _ kod.InstanceOf[Caller] = (*caller)(nil)
var _ kod.InstanceOf[Config] = (*config)(nil)
var _ kod.InstanceOf[Gateway] = (*server)(nil)
var _ kod.InstanceOf[Queryer] = (*queryer)(nil)
var _ kod.InstanceOf[Reflection] = (*reflection)(nil)
var _ kod.InstanceOf[Registry] = (*repository)(nil)

// Local stub implementations.

type caller_local_stub struct {
	impl        Caller
	name        string
	interceptor interceptor.Interceptor
}

// Check that caller_local_stub implements the Caller interface.
var _ Caller = (*caller_local_stub)(nil)

func (s caller_local_stub) Call(ctx context.Context, a1 *desc.MethodDescriptor, a2 protoiface.MessageV1) (r0 protoiface.MessageV1, err error) {

	if s.interceptor == nil {
		r0, err = s.impl.Call(ctx, a1, a2)
		return
	}

	call := func(ctx context.Context, info interceptor.CallInfo, req, res []any) (err error) {
		r0, err = s.impl.Call(ctx, a1, a2)
		res[0] = r0
		return
	}

	info := interceptor.CallInfo{
		Impl:       s.impl,
		Component:  s.name,
		FullMethod: "github.com/sysulq/graphql-grpc-gateway/pkg/server/Caller.Call",
		Method:     "Call",
	}

	err = s.interceptor(ctx, info, []any{a1, a2}, []any{r0}, call)
	return
}

func (s caller_local_stub) GetDescs() (r0 []*desc.FileDescriptor) {
	// Because the first argument is not context.Context, so interceptors are not supported.
	r0 = s.impl.GetDescs()
	return
}

type config_local_stub struct {
	impl        Config
	name        string
	interceptor interceptor.Interceptor
}

// Check that config_local_stub implements the Config interface.
var _ Config = (*config_local_stub)(nil)

func (s config_local_stub) Config() (r0 *ConfigInfo) {
	// Because the first argument is not context.Context, so interceptors are not supported.
	r0 = s.impl.Config()
	return
}

type gateway_local_stub struct {
	impl        Gateway
	name        string
	interceptor interceptor.Interceptor
}

// Check that gateway_local_stub implements the Gateway interface.
var _ Gateway = (*gateway_local_stub)(nil)

func (s gateway_local_stub) BuildServer() (r0 http.Handler, err error) {
	// Because the first argument is not context.Context, so interceptors are not supported.
	r0, err = s.impl.BuildServer()
	return
}

type queryer_local_stub struct {
	impl        Queryer
	name        string
	interceptor interceptor.Interceptor
}

// Check that queryer_local_stub implements the Queryer interface.
var _ Queryer = (*queryer_local_stub)(nil)

func (s queryer_local_stub) Query(ctx context.Context, a1 *graphql.QueryInput, a2 interface{}) (err error) {

	if s.interceptor == nil {
		err = s.impl.Query(ctx, a1, a2)
		return
	}

	call := func(ctx context.Context, info interceptor.CallInfo, req, res []any) (err error) {
		err = s.impl.Query(ctx, a1, a2)
		return
	}

	info := interceptor.CallInfo{
		Impl:       s.impl,
		Component:  s.name,
		FullMethod: "github.com/sysulq/graphql-grpc-gateway/pkg/server/Queryer.Query",
		Method:     "Query",
	}

	err = s.interceptor(ctx, info, []any{a1, a2}, []any{}, call)
	return
}

type reflection_local_stub struct {
	impl        Reflection
	name        string
	interceptor interceptor.Interceptor
}

// Check that reflection_local_stub implements the Reflection interface.
var _ Reflection = (*reflection_local_stub)(nil)

func (s reflection_local_stub) ListPackages(ctx context.Context, a1 grpc.ClientConnInterface) (r0 []*desc.FileDescriptor, err error) {

	if s.interceptor == nil {
		r0, err = s.impl.ListPackages(ctx, a1)
		return
	}

	call := func(ctx context.Context, info interceptor.CallInfo, req, res []any) (err error) {
		r0, err = s.impl.ListPackages(ctx, a1)
		res[0] = r0
		return
	}

	info := interceptor.CallInfo{
		Impl:       s.impl,
		Component:  s.name,
		FullMethod: "github.com/sysulq/graphql-grpc-gateway/pkg/server/Reflection.ListPackages",
		Method:     "ListPackages",
	}

	err = s.interceptor(ctx, info, []any{a1}, []any{r0}, call)
	return
}

type registry_local_stub struct {
	impl        Registry
	name        string
	interceptor interceptor.Interceptor
}

// Check that registry_local_stub implements the Registry interface.
var _ Registry = (*registry_local_stub)(nil)

func (s registry_local_stub) FindFieldByName(a0 desc.Descriptor, a1 string) (r0 *desc.FieldDescriptor) {
	// Because the first argument is not context.Context, so interceptors are not supported.
	r0 = s.impl.FindFieldByName(a0, a1)
	return
}

func (s registry_local_stub) FindGraphqlFieldByProtoField(a0 *ast.Definition, a1 string) (r0 *ast.FieldDefinition) {
	// Because the first argument is not context.Context, so interceptors are not supported.
	r0 = s.impl.FindGraphqlFieldByProtoField(a0, a1)
	return
}

func (s registry_local_stub) FindMethodByName(a0 ast.Operation, a1 string) (r0 *desc.MethodDescriptor) {
	// Because the first argument is not context.Context, so interceptors are not supported.
	r0 = s.impl.FindMethodByName(a0, a1)
	return
}

func (s registry_local_stub) FindObjectByFullyQualifiedName(a0 string) (r0 *desc.MessageDescriptor, r1 *ast.Definition) {
	// Because the first argument is not context.Context, so interceptors are not supported.
	r0, r1 = s.impl.FindObjectByFullyQualifiedName(a0)
	return
}

func (s registry_local_stub) FindObjectByName(a0 string) (r0 *desc.MessageDescriptor) {
	// Because the first argument is not context.Context, so interceptors are not supported.
	r0 = s.impl.FindObjectByName(a0)
	return
}

func (s registry_local_stub) FindUnionFieldByMessageFQNAndName(a0 string, a1 string) (r0 *desc.FieldDescriptor) {
	// Because the first argument is not context.Context, so interceptors are not supported.
	r0 = s.impl.FindUnionFieldByMessageFQNAndName(a0, a1)
	return
}

func (s registry_local_stub) SchemaDescriptorList() (r0 generator.SchemaDescriptorList) {
	// Because the first argument is not context.Context, so interceptors are not supported.
	r0 = s.impl.SchemaDescriptorList()
	return
}
