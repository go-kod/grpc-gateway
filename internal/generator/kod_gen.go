// Code generated by "kod generate". DO NOT EDIT.
//go:build !ignoreKodGen

package generator

import (
	"context"
	"github.com/go-kod/kod"
	"github.com/go-kod/kod/interceptor"
	"github.com/jhump/protoreflect/desc"
	"google.golang.org/protobuf/compiler/protogen"
	"reflect"
)

func init() {
	kod.Register(&kod.Registration{
		Name:      "github.com/sysulq/graphql-grpc-gateway/internal/generator/Generator",
		Interface: reflect.TypeOf((*Generator)(nil)).Elem(),
		Impl:      reflect.TypeOf(generator{}),
		Refs:      `⟦e7c58848:KoDeDgE:github.com/sysulq/graphql-grpc-gateway/internal/generator/Generator→github.com/sysulq/graphql-grpc-gateway/internal/config/Config⟧`,
		LocalStubFn: func(ctx context.Context, info *kod.LocalStubFnInfo) any {
			interceptors := info.Interceptors
			if h, ok := info.Impl.(interface {
				Interceptors() []interceptor.Interceptor
			}); ok {
				interceptors = append(interceptors, h.Interceptors()...)
			}

			return generator_local_stub{
				impl:        info.Impl.(Generator),
				interceptor: interceptor.Chain(interceptors),
				name:        info.Name,
			}
		},
	})
}

// kod.InstanceOf checks.
var _ kod.InstanceOf[Generator] = (*generator)(nil)

// Local stub implementations.

type generator_local_stub struct {
	impl        Generator
	name        string
	interceptor interceptor.Interceptor
}

// Check that generator_local_stub implements the Generator interface.
var _ Generator = (*generator_local_stub)(nil)

func (s generator_local_stub) NewSchemas(a0 []*desc.FileDescriptor, a1 bool, a2 bool, a3 *protogen.Plugin) (r0 SchemaDescriptorList, err error) {
	// Because the first argument is not context.Context, so interceptors are not supported.
	r0, err = s.impl.NewSchemas(a0, a1, a2, a3)
	return
}
