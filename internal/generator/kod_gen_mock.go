// Code generated by MockGen. DO NOT EDIT.
// Source: internal/generator/kod_gen_interface.go
//
// Generated by this command:
//
//	mockgen -source internal/generator/kod_gen_interface.go -destination internal/generator/kod_gen_mock.go -package generator
//

// Package generator is a generated GoMock package.
package generator

import (
	reflect "reflect"

	desc "github.com/jhump/protoreflect/desc"
	gomock "go.uber.org/mock/gomock"
	protogen "google.golang.org/protobuf/compiler/protogen"
)

// MockGenerator is a mock of Generator interface.
type MockGenerator struct {
	ctrl     *gomock.Controller
	recorder *MockGeneratorMockRecorder
}

// MockGeneratorMockRecorder is the mock recorder for MockGenerator.
type MockGeneratorMockRecorder struct {
	mock *MockGenerator
}

// NewMockGenerator creates a new mock instance.
func NewMockGenerator(ctrl *gomock.Controller) *MockGenerator {
	mock := &MockGenerator{ctrl: ctrl}
	mock.recorder = &MockGeneratorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGenerator) EXPECT() *MockGeneratorMockRecorder {
	return m.recorder
}

// NewSchemas mocks base method.
func (m *MockGenerator) NewSchemas(descs []*desc.FileDescriptor, mergeSchemas, genServiceDesc bool, plugin *protogen.Plugin) (SchemaDescriptorList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewSchemas", descs, mergeSchemas, genServiceDesc, plugin)
	ret0, _ := ret[0].(SchemaDescriptorList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewSchemas indicates an expected call of NewSchemas.
func (mr *MockGeneratorMockRecorder) NewSchemas(descs, mergeSchemas, genServiceDesc, plugin any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewSchemas", reflect.TypeOf((*MockGenerator)(nil).NewSchemas), descs, mergeSchemas, genServiceDesc, plugin)
}
