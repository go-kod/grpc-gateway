// Code generated by "kod generate"; DO NOT EDIT.

package server

import (
	"context"
	"net/http"

	"github.com/gin-gonic/gin"
	"github.com/jhump/protoreflect/v2/grpcdynamic"
	"github.com/nautilus/graphql"
	"github.com/vektah/gqlparser/v2/ast"
	"google.golang.org/grpc"
	"google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/reflect/protoreflect"
)

// Caller is implemented by [caller],
// which can be mocked with [NewMockCaller].
type Caller interface {
	// Call is implemented by [caller.Call]
	Call(ctx context.Context, rpc protoreflect.MethodDescriptor, message proto.Message) (proto.Message, error)
}

// CallerRegistry is implemented by [callerRegistry],
// which can be mocked with [NewMockCallerRegistry].
type CallerRegistry interface {
	// FindMethodByName is implemented by [callerRegistry.FindMethodByName]
	FindMethodByName(op ast.Operation, name string) protoreflect.MethodDescriptor
	// GraphQLSchema is implemented by [callerRegistry.GraphQLSchema]
	GraphQLSchema() *ast.Schema
	// Marshal is implemented by [callerRegistry.Marshal]
	Marshal(proto proto.Message, field *ast.Field) (interface{}, error)
	// Unmarshal is implemented by [callerRegistry.Unmarshal]
	Unmarshal(desc protoreflect.MessageDescriptor, field *ast.Field, vars map[string]interface{}) (proto.Message, error)
	// GetCallerStub is implemented by [callerRegistry.GetCallerStub]
	GetCallerStub(service string) *grpcdynamic.Stub
}

// Reflection is implemented by [reflection],
// which can be mocked with [NewMockReflection].
type Reflection interface {
	// ListPackages is implemented by [reflection.ListPackages]
	ListPackages(ctx context.Context, cc grpc.ClientConnInterface) ([]protoreflect.FileDescriptor, error)
}

// Gateway is implemented by [server],
// which can be mocked with [NewMockGateway].
type Gateway interface {
	// BuildServer is implemented by [server.BuildServer]
	BuildServer() (http.Handler, error)
}

// Invoker is implemented by [invoker],
// which can be mocked with [NewMockInvoker].
type Invoker interface {
	// Invoke is implemented by [invoker.Invoke]
	Invoke(ctx context.Context, c *gin.Context, upstream upstreamInfo, rpcPath string)
}

// Upstream is implemented by [upstream],
// which can be mocked with [NewMockUpstream].
type Upstream interface {
	// Register is implemented by [upstream.Register]
	Register(ctx context.Context, router *gin.Engine)
}

// Queryer is implemented by [queryer],
// which can be mocked with [NewMockQueryer].
type Queryer interface {
	// Query is implemented by [queryer.Query]
	Query(ctx context.Context, input *graphql.QueryInput, result interface{}) error
}
