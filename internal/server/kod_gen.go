// Code generated by "kod generate". DO NOT EDIT.
//go:build !ignoreKodGen

package server

import (
	"context"
	"github.com/gin-gonic/gin"
	"github.com/go-kod/kod"
	"github.com/go-kod/kod/interceptor"
	"github.com/jhump/protoreflect/v2/grpcdynamic"
	"github.com/nautilus/graphql"
	"github.com/vektah/gqlparser/v2/ast"
	"google.golang.org/grpc"
	"google.golang.org/protobuf/reflect/protoreflect"
	"net/http"
	"reflect"
)

// Full method names for components.
const (
	// Caller_Call_FullMethodName is the full name of the method [caller.Call].
	Caller_Call_FullMethodName = "github.com/sysulq/graphql-grpc-gateway/internal/server/Caller.Call"
	// Reflection_ListPackages_FullMethodName is the full name of the method [reflection.ListPackages].
	Reflection_ListPackages_FullMethodName = "github.com/sysulq/graphql-grpc-gateway/internal/server/Reflection.ListPackages"
	// Invoker_Invoke_FullMethodName is the full name of the method [invoker.Invoke].
	Invoker_Invoke_FullMethodName = "github.com/sysulq/graphql-grpc-gateway/internal/server/Invoker.Invoke"
	// Upstream_Register_FullMethodName is the full name of the method [upstream.Register].
	Upstream_Register_FullMethodName = "github.com/sysulq/graphql-grpc-gateway/internal/server/Upstream.Register"
	// Queryer_Query_FullMethodName is the full name of the method [queryer.Query].
	Queryer_Query_FullMethodName = "github.com/sysulq/graphql-grpc-gateway/internal/server/Queryer.Query"
)

func init() {
	kod.Register(&kod.Registration{
		Name:      "github.com/sysulq/graphql-grpc-gateway/internal/server/Caller",
		Interface: reflect.TypeOf((*Caller)(nil)).Elem(),
		Impl:      reflect.TypeOf(caller{}),
		Refs: `⟦6b1d0901:KoDeDgE:github.com/sysulq/graphql-grpc-gateway/internal/server/Caller→github.com/sysulq/graphql-grpc-gateway/internal/config/Config⟧,
⟦09e993b0:KoDeDgE:github.com/sysulq/graphql-grpc-gateway/internal/server/Caller→github.com/sysulq/graphql-grpc-gateway/internal/server/CallerRegistry⟧`,
		LocalStubFn: func(ctx context.Context, info *kod.LocalStubFnInfo) any {
			return caller_local_stub{
				impl:        info.Impl.(Caller),
				interceptor: info.Interceptor,
			}
		},
	})
	kod.Register(&kod.Registration{
		Name:      "github.com/sysulq/graphql-grpc-gateway/internal/server/CallerRegistry",
		Interface: reflect.TypeOf((*CallerRegistry)(nil)).Elem(),
		Impl:      reflect.TypeOf(callerRegistry{}),
		Refs: `⟦86a35e79:KoDeDgE:github.com/sysulq/graphql-grpc-gateway/internal/server/CallerRegistry→github.com/sysulq/graphql-grpc-gateway/internal/config/Config⟧,
⟦a92f40b6:KoDeDgE:github.com/sysulq/graphql-grpc-gateway/internal/server/CallerRegistry→github.com/sysulq/graphql-grpc-gateway/internal/server/Reflection⟧`,
		LocalStubFn: func(ctx context.Context, info *kod.LocalStubFnInfo) any {
			return callerRegistry_local_stub{
				impl:        info.Impl.(CallerRegistry),
				interceptor: info.Interceptor,
			}
		},
	})
	kod.Register(&kod.Registration{
		Name:      "github.com/sysulq/graphql-grpc-gateway/internal/server/Reflection",
		Interface: reflect.TypeOf((*Reflection)(nil)).Elem(),
		Impl:      reflect.TypeOf(reflection{}),
		Refs:      ``,
		LocalStubFn: func(ctx context.Context, info *kod.LocalStubFnInfo) any {
			return reflection_local_stub{
				impl:        info.Impl.(Reflection),
				interceptor: info.Interceptor,
			}
		},
	})
	kod.Register(&kod.Registration{
		Name:      "github.com/sysulq/graphql-grpc-gateway/internal/server/Gateway",
		Interface: reflect.TypeOf((*Gateway)(nil)).Elem(),
		Impl:      reflect.TypeOf(server{}),
		Refs: `⟦88a4dee9:KoDeDgE:github.com/sysulq/graphql-grpc-gateway/internal/server/Gateway→github.com/sysulq/graphql-grpc-gateway/internal/config/Config⟧,
⟦f59f8a3c:KoDeDgE:github.com/sysulq/graphql-grpc-gateway/internal/server/Gateway→github.com/sysulq/graphql-grpc-gateway/internal/server/Caller⟧,
⟦b39287d6:KoDeDgE:github.com/sysulq/graphql-grpc-gateway/internal/server/Gateway→github.com/sysulq/graphql-grpc-gateway/internal/server/Queryer⟧,
⟦2bafdbff:KoDeDgE:github.com/sysulq/graphql-grpc-gateway/internal/server/Gateway→github.com/sysulq/graphql-grpc-gateway/internal/server/CallerRegistry⟧`,
		LocalStubFn: func(ctx context.Context, info *kod.LocalStubFnInfo) any {
			return gateway_local_stub{
				impl:        info.Impl.(Gateway),
				interceptor: info.Interceptor,
			}
		},
	})
	kod.Register(&kod.Registration{
		Name:      "github.com/sysulq/graphql-grpc-gateway/internal/server/Invoker",
		Interface: reflect.TypeOf((*Invoker)(nil)).Elem(),
		Impl:      reflect.TypeOf(invoker{}),
		Refs:      ``,
		LocalStubFn: func(ctx context.Context, info *kod.LocalStubFnInfo) any {
			return invoker_local_stub{
				impl:        info.Impl.(Invoker),
				interceptor: info.Interceptor,
			}
		},
	})
	kod.Register(&kod.Registration{
		Name:      "github.com/sysulq/graphql-grpc-gateway/internal/server/Upstream",
		Interface: reflect.TypeOf((*Upstream)(nil)).Elem(),
		Impl:      reflect.TypeOf(upstream{}),
		Refs: `⟦0f6f4389:KoDeDgE:github.com/sysulq/graphql-grpc-gateway/internal/server/Upstream→github.com/sysulq/graphql-grpc-gateway/internal/server/Invoker⟧,
⟦bef0f87d:KoDeDgE:github.com/sysulq/graphql-grpc-gateway/internal/server/Upstream→github.com/sysulq/graphql-grpc-gateway/internal/config/Config⟧`,
		LocalStubFn: func(ctx context.Context, info *kod.LocalStubFnInfo) any {
			return upstream_local_stub{
				impl:        info.Impl.(Upstream),
				interceptor: info.Interceptor,
			}
		},
	})
	kod.Register(&kod.Registration{
		Name:      "github.com/sysulq/graphql-grpc-gateway/internal/server/Queryer",
		Interface: reflect.TypeOf((*Queryer)(nil)).Elem(),
		Impl:      reflect.TypeOf(queryer{}),
		Refs: `⟦20a41d92:KoDeDgE:github.com/sysulq/graphql-grpc-gateway/internal/server/Queryer→github.com/sysulq/graphql-grpc-gateway/internal/config/Config⟧,
⟦8d32f9dd:KoDeDgE:github.com/sysulq/graphql-grpc-gateway/internal/server/Queryer→github.com/sysulq/graphql-grpc-gateway/internal/server/Caller⟧,
⟦bcaec4e2:KoDeDgE:github.com/sysulq/graphql-grpc-gateway/internal/server/Queryer→github.com/sysulq/graphql-grpc-gateway/internal/server/CallerRegistry⟧`,
		LocalStubFn: func(ctx context.Context, info *kod.LocalStubFnInfo) any {
			return queryer_local_stub{
				impl:        info.Impl.(Queryer),
				interceptor: info.Interceptor,
			}
		},
	})
}

// kod.InstanceOf checks.
var _ kod.InstanceOf[Caller] = (*caller)(nil)
var _ kod.InstanceOf[CallerRegistry] = (*callerRegistry)(nil)
var _ kod.InstanceOf[Reflection] = (*reflection)(nil)
var _ kod.InstanceOf[Gateway] = (*server)(nil)
var _ kod.InstanceOf[Invoker] = (*invoker)(nil)
var _ kod.InstanceOf[Upstream] = (*upstream)(nil)
var _ kod.InstanceOf[Queryer] = (*queryer)(nil)

// Local stub implementations.
// caller_local_stub is a local stub implementation of [Caller].
type caller_local_stub struct {
	impl        Caller
	interceptor interceptor.Interceptor
}

// Check that [caller_local_stub] implements the [Caller] interface.
var _ Caller = (*caller_local_stub)(nil)

// Call wraps the method [caller.Call].
func (s caller_local_stub) Call(ctx context.Context, a1 protoreflect.MethodDescriptor, a2 protoreflect.ProtoMessage) (r0 protoreflect.ProtoMessage, err error) {

	if s.interceptor == nil {
		r0, err = s.impl.Call(ctx, a1, a2)
		return
	}

	call := func(ctx context.Context, info interceptor.CallInfo, req, res []any) (err error) {
		r0, err = s.impl.Call(ctx, a1, a2)
		res[0] = r0
		return
	}

	info := interceptor.CallInfo{
		Impl:       s.impl,
		FullMethod: Caller_Call_FullMethodName,
	}

	err = s.interceptor(ctx, info, []any{a1, a2}, []any{r0}, call)
	return
}

// callerRegistry_local_stub is a local stub implementation of [CallerRegistry].
type callerRegistry_local_stub struct {
	impl        CallerRegistry
	interceptor interceptor.Interceptor
}

// Check that [callerRegistry_local_stub] implements the [CallerRegistry] interface.
var _ CallerRegistry = (*callerRegistry_local_stub)(nil)

// FindMethodByName wraps the method [callerRegistry.FindMethodByName].
func (s callerRegistry_local_stub) FindMethodByName(a0 ast.Operation, a1 string) (r0 protoreflect.MethodDescriptor) {
	// Because the first argument is not context.Context, so interceptors are not supported.
	r0 = s.impl.FindMethodByName(a0, a1)
	return
}

// GetCallerStub wraps the method [callerRegistry.GetCallerStub].
func (s callerRegistry_local_stub) GetCallerStub(a0 string) (r0 *grpcdynamic.Stub) {
	// Because the first argument is not context.Context, so interceptors are not supported.
	r0 = s.impl.GetCallerStub(a0)
	return
}

// GraphQLSchema wraps the method [callerRegistry.GraphQLSchema].
func (s callerRegistry_local_stub) GraphQLSchema() (r0 *ast.Schema) {
	// Because the first argument is not context.Context, so interceptors are not supported.
	r0 = s.impl.GraphQLSchema()
	return
}

// Marshal wraps the method [callerRegistry.Marshal].
func (s callerRegistry_local_stub) Marshal(a0 protoreflect.ProtoMessage, a1 *ast.Field) (r0 interface{}, err error) {
	// Because the first argument is not context.Context, so interceptors are not supported.
	r0, err = s.impl.Marshal(a0, a1)
	return
}

// Unmarshal wraps the method [callerRegistry.Unmarshal].
func (s callerRegistry_local_stub) Unmarshal(a0 protoreflect.MessageDescriptor, a1 *ast.Field, a2 map[string]interface{}) (r0 protoreflect.ProtoMessage, err error) {
	// Because the first argument is not context.Context, so interceptors are not supported.
	r0, err = s.impl.Unmarshal(a0, a1, a2)
	return
}

// reflection_local_stub is a local stub implementation of [Reflection].
type reflection_local_stub struct {
	impl        Reflection
	interceptor interceptor.Interceptor
}

// Check that [reflection_local_stub] implements the [Reflection] interface.
var _ Reflection = (*reflection_local_stub)(nil)

// ListPackages wraps the method [reflection.ListPackages].
func (s reflection_local_stub) ListPackages(ctx context.Context, a1 grpc.ClientConnInterface) (r0 []protoreflect.FileDescriptor, err error) {

	if s.interceptor == nil {
		r0, err = s.impl.ListPackages(ctx, a1)
		return
	}

	call := func(ctx context.Context, info interceptor.CallInfo, req, res []any) (err error) {
		r0, err = s.impl.ListPackages(ctx, a1)
		res[0] = r0
		return
	}

	info := interceptor.CallInfo{
		Impl:       s.impl,
		FullMethod: Reflection_ListPackages_FullMethodName,
	}

	err = s.interceptor(ctx, info, []any{a1}, []any{r0}, call)
	return
}

// gateway_local_stub is a local stub implementation of [Gateway].
type gateway_local_stub struct {
	impl        Gateway
	interceptor interceptor.Interceptor
}

// Check that [gateway_local_stub] implements the [Gateway] interface.
var _ Gateway = (*gateway_local_stub)(nil)

// BuildServer wraps the method [server.BuildServer].
func (s gateway_local_stub) BuildServer() (r0 http.Handler, err error) {
	// Because the first argument is not context.Context, so interceptors are not supported.
	r0, err = s.impl.BuildServer()
	return
}

// invoker_local_stub is a local stub implementation of [Invoker].
type invoker_local_stub struct {
	impl        Invoker
	interceptor interceptor.Interceptor
}

// Check that [invoker_local_stub] implements the [Invoker] interface.
var _ Invoker = (*invoker_local_stub)(nil)

// Invoke wraps the method [invoker.Invoke].
func (s invoker_local_stub) Invoke(ctx context.Context, a1 *gin.Context, a2 upstreamInfo, a3 string) {

	if s.interceptor == nil {
		s.impl.Invoke(ctx, a1, a2, a3)
		return
	}

	call := func(ctx context.Context, info interceptor.CallInfo, req, res []any) (err error) {
		s.impl.Invoke(ctx, a1, a2, a3)
		return
	}

	info := interceptor.CallInfo{
		Impl:       s.impl,
		FullMethod: Invoker_Invoke_FullMethodName,
	}

	_ = s.interceptor(ctx, info, []any{a1, a2, a3}, []any{}, call)
}

// upstream_local_stub is a local stub implementation of [Upstream].
type upstream_local_stub struct {
	impl        Upstream
	interceptor interceptor.Interceptor
}

// Check that [upstream_local_stub] implements the [Upstream] interface.
var _ Upstream = (*upstream_local_stub)(nil)

// Register wraps the method [upstream.Register].
func (s upstream_local_stub) Register(ctx context.Context, a1 *gin.Engine) {

	if s.interceptor == nil {
		s.impl.Register(ctx, a1)
		return
	}

	call := func(ctx context.Context, info interceptor.CallInfo, req, res []any) (err error) {
		s.impl.Register(ctx, a1)
		return
	}

	info := interceptor.CallInfo{
		Impl:       s.impl,
		FullMethod: Upstream_Register_FullMethodName,
	}

	_ = s.interceptor(ctx, info, []any{a1}, []any{}, call)
}

// queryer_local_stub is a local stub implementation of [Queryer].
type queryer_local_stub struct {
	impl        Queryer
	interceptor interceptor.Interceptor
}

// Check that [queryer_local_stub] implements the [Queryer] interface.
var _ Queryer = (*queryer_local_stub)(nil)

// Query wraps the method [queryer.Query].
func (s queryer_local_stub) Query(ctx context.Context, a1 *graphql.QueryInput, a2 interface{}) (err error) {

	if s.interceptor == nil {
		err = s.impl.Query(ctx, a1, a2)
		return
	}

	call := func(ctx context.Context, info interceptor.CallInfo, req, res []any) (err error) {
		err = s.impl.Query(ctx, a1, a2)
		return
	}

	info := interceptor.CallInfo{
		Impl:       s.impl,
		FullMethod: Queryer_Query_FullMethodName,
	}

	err = s.interceptor(ctx, info, []any{a1, a2}, []any{}, call)
	return
}
