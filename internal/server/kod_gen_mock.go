// Code generated by MockGen. DO NOT EDIT.
// Source: internal/server/kod_gen_interface.go
//
// Generated by this command:
//
//	mockgen -source internal/server/kod_gen_interface.go -destination internal/server/kod_gen_mock.go -package server
//

// Package server is a generated GoMock package.
package server

import (
	context "context"
	http "net/http"
	reflect "reflect"

	grpcdynamic "github.com/jhump/protoreflect/v2/grpcdynamic"
	graphql "github.com/nautilus/graphql"
	ast "github.com/vektah/gqlparser/v2/ast"
	gomock "go.uber.org/mock/gomock"
	grpc "google.golang.org/grpc"
	proto "google.golang.org/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
)

// MockCaller is a mock of Caller interface.
type MockCaller struct {
	ctrl     *gomock.Controller
	recorder *MockCallerMockRecorder
}

// MockCallerMockRecorder is the mock recorder for MockCaller.
type MockCallerMockRecorder struct {
	mock *MockCaller
}

// NewMockCaller creates a new mock instance.
func NewMockCaller(ctrl *gomock.Controller) *MockCaller {
	mock := &MockCaller{ctrl: ctrl}
	mock.recorder = &MockCallerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCaller) EXPECT() *MockCallerMockRecorder {
	return m.recorder
}

// Call mocks base method.
func (m *MockCaller) Call(ctx context.Context, rpc protoreflect.MethodDescriptor, message proto.Message) (proto.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Call", ctx, rpc, message)
	ret0, _ := ret[0].(proto.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Call indicates an expected call of Call.
func (mr *MockCallerMockRecorder) Call(ctx, rpc, message any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Call", reflect.TypeOf((*MockCaller)(nil).Call), ctx, rpc, message)
}

// MockCallerRegistry is a mock of CallerRegistry interface.
type MockCallerRegistry struct {
	ctrl     *gomock.Controller
	recorder *MockCallerRegistryMockRecorder
}

// MockCallerRegistryMockRecorder is the mock recorder for MockCallerRegistry.
type MockCallerRegistryMockRecorder struct {
	mock *MockCallerRegistry
}

// NewMockCallerRegistry creates a new mock instance.
func NewMockCallerRegistry(ctrl *gomock.Controller) *MockCallerRegistry {
	mock := &MockCallerRegistry{ctrl: ctrl}
	mock.recorder = &MockCallerRegistryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCallerRegistry) EXPECT() *MockCallerRegistryMockRecorder {
	return m.recorder
}

// FindMethodByName mocks base method.
func (m *MockCallerRegistry) FindMethodByName(op ast.Operation, name string) protoreflect.MethodDescriptor {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindMethodByName", op, name)
	ret0, _ := ret[0].(protoreflect.MethodDescriptor)
	return ret0
}

// FindMethodByName indicates an expected call of FindMethodByName.
func (mr *MockCallerRegistryMockRecorder) FindMethodByName(op, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindMethodByName", reflect.TypeOf((*MockCallerRegistry)(nil).FindMethodByName), op, name)
}

// GetCallerStub mocks base method.
func (m *MockCallerRegistry) GetCallerStub(service string) *grpcdynamic.Stub {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCallerStub", service)
	ret0, _ := ret[0].(*grpcdynamic.Stub)
	return ret0
}

// GetCallerStub indicates an expected call of GetCallerStub.
func (mr *MockCallerRegistryMockRecorder) GetCallerStub(service any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCallerStub", reflect.TypeOf((*MockCallerRegistry)(nil).GetCallerStub), service)
}

// GraphQLSchema mocks base method.
func (m *MockCallerRegistry) GraphQLSchema() *ast.Schema {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GraphQLSchema")
	ret0, _ := ret[0].(*ast.Schema)
	return ret0
}

// GraphQLSchema indicates an expected call of GraphQLSchema.
func (mr *MockCallerRegistryMockRecorder) GraphQLSchema() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GraphQLSchema", reflect.TypeOf((*MockCallerRegistry)(nil).GraphQLSchema))
}

// Marshal mocks base method.
func (m *MockCallerRegistry) Marshal(proto proto.Message, field *ast.Field) (any, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Marshal", proto, field)
	ret0, _ := ret[0].(any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Marshal indicates an expected call of Marshal.
func (mr *MockCallerRegistryMockRecorder) Marshal(proto, field any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Marshal", reflect.TypeOf((*MockCallerRegistry)(nil).Marshal), proto, field)
}

// Unmarshal mocks base method.
func (m *MockCallerRegistry) Unmarshal(desc protoreflect.MessageDescriptor, field *ast.Field, vars map[string]any) (proto.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Unmarshal", desc, field, vars)
	ret0, _ := ret[0].(proto.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Unmarshal indicates an expected call of Unmarshal.
func (mr *MockCallerRegistryMockRecorder) Unmarshal(desc, field, vars any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unmarshal", reflect.TypeOf((*MockCallerRegistry)(nil).Unmarshal), desc, field, vars)
}

// MockReflection is a mock of Reflection interface.
type MockReflection struct {
	ctrl     *gomock.Controller
	recorder *MockReflectionMockRecorder
}

// MockReflectionMockRecorder is the mock recorder for MockReflection.
type MockReflectionMockRecorder struct {
	mock *MockReflection
}

// NewMockReflection creates a new mock instance.
func NewMockReflection(ctrl *gomock.Controller) *MockReflection {
	mock := &MockReflection{ctrl: ctrl}
	mock.recorder = &MockReflectionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockReflection) EXPECT() *MockReflectionMockRecorder {
	return m.recorder
}

// ListPackages mocks base method.
func (m *MockReflection) ListPackages(ctx context.Context, cc grpc.ClientConnInterface) ([]protoreflect.FileDescriptor, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPackages", ctx, cc)
	ret0, _ := ret[0].([]protoreflect.FileDescriptor)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPackages indicates an expected call of ListPackages.
func (mr *MockReflectionMockRecorder) ListPackages(ctx, cc any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPackages", reflect.TypeOf((*MockReflection)(nil).ListPackages), ctx, cc)
}

// MockGateway is a mock of Gateway interface.
type MockGateway struct {
	ctrl     *gomock.Controller
	recorder *MockGatewayMockRecorder
}

// MockGatewayMockRecorder is the mock recorder for MockGateway.
type MockGatewayMockRecorder struct {
	mock *MockGateway
}

// NewMockGateway creates a new mock instance.
func NewMockGateway(ctrl *gomock.Controller) *MockGateway {
	mock := &MockGateway{ctrl: ctrl}
	mock.recorder = &MockGatewayMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGateway) EXPECT() *MockGatewayMockRecorder {
	return m.recorder
}

// BuildServer mocks base method.
func (m *MockGateway) BuildServer() (http.Handler, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BuildServer")
	ret0, _ := ret[0].(http.Handler)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BuildServer indicates an expected call of BuildServer.
func (mr *MockGatewayMockRecorder) BuildServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BuildServer", reflect.TypeOf((*MockGateway)(nil).BuildServer))
}

// MockQueryer is a mock of Queryer interface.
type MockQueryer struct {
	ctrl     *gomock.Controller
	recorder *MockQueryerMockRecorder
}

// MockQueryerMockRecorder is the mock recorder for MockQueryer.
type MockQueryerMockRecorder struct {
	mock *MockQueryer
}

// NewMockQueryer creates a new mock instance.
func NewMockQueryer(ctrl *gomock.Controller) *MockQueryer {
	mock := &MockQueryer{ctrl: ctrl}
	mock.recorder = &MockQueryerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockQueryer) EXPECT() *MockQueryerMockRecorder {
	return m.recorder
}

// Query mocks base method.
func (m *MockQueryer) Query(ctx context.Context, input *graphql.QueryInput, result any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Query", ctx, input, result)
	ret0, _ := ret[0].(error)
	return ret0
}

// Query indicates an expected call of Query.
func (mr *MockQueryerMockRecorder) Query(ctx, input, result any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Query", reflect.TypeOf((*MockQueryer)(nil).Query), ctx, input, result)
}
